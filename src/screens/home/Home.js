import React,{useState,useEffect} from 'react';
import {View,SafeAreaView,Modal,TouchableOpacity,Text,Platform,PermissionsAndroid,FlatList,Image,ActivityIndicator} from 'react-native';
import auth from '@react-native-firebase/auth'

import { launchCamera, launchImageLibrary } from 'react-native-image-picker';

import {styles} from './styles'
import { images } from '../../assets/images';

import {Header,CustomButton} from '../../components';

import Firebase from '../../services/firebse/Firebase'

export const Home=(props)=>{
    let {navigation}=props;
    
    const [imageUrl,setImageUrl]=useState(null);
    const [imgModal,setImgModal]=useState(false);
    
    const [imgPerPage,setImgPerPage]=useState(20)

    const [userImgData,setUserImgData]=useState([]);
    const [loading,setLoading]=useState(true);

    useEffect(()=>{
       getImagesData(imgPerPage)
    },[])

    const getImagesData=(dataPerPage)=>{
        let tempArr=[]
        Firebase.fetchAllRecordsOfCollection("IMAGES",dataPerPage,(res)=>{
            setLoading(false);
            if(res.isSuccess){
                res.response.map((item,index)=>{
                    return tempArr.push(item)
                })
             }
             setUserImgData([...tempArr])
         })
    }


    const requestCameraPermission = async () => {
        try {
          const granted = await PermissionsAndroid.request(
            PermissionsAndroid.PERMISSIONS.CAMERA,
            {
              title: 'ImageSpace App Camera Permission',
              message:
                'ImageSpace needs access to your camera ' +
                'so you can take pictures.',
              buttonNeutral: 'Ask Me Later',
              buttonNegative: 'Cancel',
              buttonPositive: 'OK',
            },
          );
          if (granted === PermissionsAndroid.RESULTS.GRANTED) {
            console.log('You can use the camera');
            captureImage();
          } else {
            console.log('Camera permission denied');
          }
        } catch (err) {
          console.warn(err);
        }
      };
    
      const chooseFile = async () => {
        launchImageLibrary({
          multiple: false,
          maxWidth: 600,
          maxHeight: 600,
          quality: 1,
        })
          .then((images) => {
            setImageUrl(images.assets[0]);
            uploadImageToStore(images.assets[0]);
          })
          .catch((err) => console.log(err));
      };
    
      const captureImage = async (type) => {
        launchCamera({
          multiple: false,
          maxWidth: 800,
          maxHeight: 800,
          quality: 1,
        })
          .then((images) => {
            setImageUrl(images.assets[0]);
            uploadImageToStore(images.assets[0]);
          })
          .catch((err) => console.log(err));
      };
    
const uploadImageToStore=(img)=>{
    setLoading(true);
    let date=new Date();
    date=date.toString()

    Firebase.uploadImage(img.uri,date,(res)=>{
        if(res.isSuccess){
        let docData={
            img:res.response
        }
         Firebase.addDocumentWithAutoGeneratedId("IMAGES",docData,(resp)=>{
           getImagesData(imgPerPage);
         })
        }
    })
}

    const logout=()=>{
      auth().signOut().then(()=>{
       navigation.replace('Login')
      })
    }

    const renderItem=({item,index})=>{
        console.log('asakjhs',item._data.img)
     return(
         <View style={styles.imgContainer}>
             <Image source={{uri:item._data.img}} style={styles.imgContainerImg}/>
         </View>
     )
    }
    return(
        <SafeAreaView style={styles.mainContainer}>
            <Header onPress={logout}/>
            <CustomButton loading={false} onPress={()=>setImgModal(true)} imgUri={images.plusIcon} loaderColor="white" style={styles.floatingBtnStyle} iStyle={styles.iconStyle}/>
        {
            loading?
            <ActivityIndicator size="large" color={'black'} />
            :
    <FlatList
    numColumns={3}
    data={userImgData}
    renderItem={renderItem}
    keyExtractor={item => item.id}
    onEndReached={()=>{
        getImagesData(imgPerPage+20);
        setImgPerPage(imgPerPage+20);
    }}   
    />
}
        
        

        {/* Modal For image */}
        <Modal
        animationType="slide"
        transparent={true}
        visible={imgModal}
        onRequestClose={() => {
          setImgModal(!imgModal);
        }}
      >
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Text style={styles.headingText}>Select Image</Text>
            <TouchableOpacity
              onPress={() => {
                setImgModal(!imgModal);
                setTimeout(() => {
                  if (Platform.OS == 'android') {
                    requestCameraPermission();
                  } else {
                    captureImage();
                  }
                }, 100);
              }}
            >
              <Text style={styles.modalText}>Take Photo</Text>
            </TouchableOpacity>
            <TouchableOpacity
              onPress={() => {
                setImgModal(!imgModal);
                setTimeout(() => {
                  chooseFile();
                }, 100);
              }}
            >
              <Text style={styles.modalText}>Choose from Albums</Text>
            </TouchableOpacity>
            <TouchableOpacity onPress={() => setImgModal(false)}>
              <Text style={styles.cancelButton}>Cancel</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
        
        </SafeAreaView>
    )
}