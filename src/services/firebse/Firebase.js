//================================ React Native Imported Files ======================================//

import React from "react";
import auth from "@react-native-firebase/auth";
import firestore, { firebase } from "@react-native-firebase/firestore";
import storage from "@react-native-firebase/storage";

import { AccessToken, LoginManager } from "react-native-fbsdk-next";
//================================ Local Imported Files ====================================== //

class firebaseServices {
  constructor(props) {}

  // ---------------------------- Authentication ---------------------------- //

  
 
 
 
 

  loginWithFacebook = (facebookCallback) => {
    console.log("Facebook Result: --->>> ");
    LoginManager.logInWithPermissions(["public_profile", "email"])
      .then((result) => {
        if (result.isCancelled) {
          facebookCallback({
            isSuccess: false,
            response: null,
            message: "User cancelled the process",
          });
        } else {
          return AccessToken.getCurrentAccessToken();
        }
      })
      .then((data) => {
        // console.log('Facebook Data: --->>> ', data);
        if (data !== undefined) {
          return auth.FacebookAuthProvider.credential(data.accessToken);
        }
      })
      .then((res) => {
        // console.log('Facebook Response: --->>> ', res);
        if (res) {
          this._loginWithSocialMediaCredentials(res, facebookCallback);
        }
      })
      .catch((error) => {
        alert(error);

        // console.log('Login with Facebook Error: ===>>',err);
        facebookCallback({
          isSuccess: false,
          response: null,
          message: error.message,
        });
      });
  };

  _loginWithSocialMediaCredentials(socialCredentials, callback) {
    console.log("socialCredentials ===>", socialCredentials);
    auth()
      .signInWithCredential(socialCredentials)

      .then((user) => {
        callback({
          isSuccess: true,
          response: user.user,
          message: "user logged in successfully.",
        }); // user.user;
      })
      .catch((error) => {
        console.log("error", error);

        // alert(error);
        callback({ isSuccess: false, response: null, message: error.message });
      });
  }

  addDocumentWithAutoGeneratedId = (collectionName, documentData, callback) => {
    let fireStoreCollection = firestore().collection(collectionName);
    fireStoreCollection
      .add(documentData)
      .then((response) => {
        callback({
          isSuccess: true,
          response: response,
          message: "Document successfully successfully",
        });
      })
      .catch((error) => {
        callback({ isSuccess: false, response: null, message: error });
      });
  };

  uploadImage(imagePath, imageName, callback) {
    // console.log('image Path ===>> ', imagePath);
    // console.log('image imageName ===>> ', imageName);

    const image =
      Platform.OS === "android"
        ? imagePath
        : imagePath.replace("file:///", ""); //imagePath.uri;
    // const uid = firebase.auth().currentUser.uid;
    const imageRef = storage().ref(`gallery/${imageName}.png`);
    imageRef
      .putFile(image)
      .then(() => {
        return imageRef.getDownloadURL();
      })
      .then((url) => {
        callback({
          isSuccess: true,
          response: url,
          message: "Image uploaded successfully",
        });
        return url;
      })
      .catch((error) => {
        callback({
          isSuccess: false,
          response: null,
          message: "Image uploading failed",
        });
        console.log(error);
      });
  }

  fetchAllRecordsOfCollection = (collectionName,dataPerPage, callback) => {
    firestore()
      .collection(collectionName)
      .limit(dataPerPage)
      .get()
      .then((response) => {
        callback({
          isSuccess: true,
          response: response._docs,
          message: "Documents fetched successfully",
        });
      })
      .catch((error) => {
        callback({ isSuccess: false, response: null, message: error.message });
      });
  };


};

const apiService = new firebaseServices();

export default apiService;